package hypercashTransaction

import (
	"encoding/hex"
	"fmt"
	"testing"
)


// 1 in --> 2 out
func Test_ec22bc53107d13e13f1837579e67160216cc58cb601e33975623fa452099c99d(t *testing.T) {
	// 模拟链上交易 ec22bc53107d13e13f1837579e67160216cc58cb601e33975623fa452099c99d
	// 交易有一个输入 两个输出

	// 构建输入
	in := Vin{
		TxID: "cfc5cd7a05b3c91ae822fbe5c0c1b868044dbd787ad504ae0d4c91db4ff8c85b",
		Vout: 2,
		Tree: TxTreeRegular, // 普通交易
		Amount: 457162520800,
		LockScript: "76a914d51c3a8a8234538336c93001d14f4e28d4d8e80c88ac",
		BlockHeight: 203705, // 交易所在高度
		BlockIndex: 1, // 交易在区块中的索引
	}
	ins := []Vin{in}

	// 构建输出
	out1 := Vout{
		Amount: 20199500000,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsEtYE4ycUDjF38Xn7UoZPynVy6HvNz8Fjk",
	}

	out2 := Vout{
		Amount: 436962995500,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsX5APCXSpR49Ei1xnivBbTW35VqzaTARrX",
	}
	outs := []Vout{out1, out2}

	locktime := uint32(0)
	expiry := NoExpiryValue

	// 创建空交易单与待签哈希
	emptyTrans, hashes, err := CreateEmptyTransactionAndHash(ins, outs, locktime,expiry)

	if err != nil {
		t.Error("创建空交易单失败！")
		return
	} else {
		fmt.Println("空交易单为 : \n", emptyTrans)
		fmt.Println("待签哈希为 : \n", hashes[0])
	}


	// 对交易签名
	prikey := []byte{0x80, 0xbc, 0x39, 0x8d, 0x7c, 0x4a, 0x67, 0x4d, 0xaa, 0x97, 0x75, 0x66, 0xc2, 0xe6, 0xcd, 0x50, 0x40, 0x52, 0x00, 0x27, 0xe5, 0x7f, 0xe8, 0x06, 0xdf, 0xaa, 0x86, 0x8d, 0xf4, 0xcc, 0x43, 0xab}

	signature, err := SignTransaction(hashes[0], prikey)
	if err != nil {
		t.Error("签名交易单失败！")
		return
	} else {
		// for test only
		signature = []byte{0xf3,0x9b,0xd5,0x0c,0x00,0x9e,0x7f,0x8b,0xec,0x0d,0x4d,0x4b,0xe3,0x5c,0x98,0x5c,0x01,0x32,0x52,0xeb,0x1b,0xad,0x75,0xa5,0xea,0x90,0xea,0xf3,0xdf,0x2c,0xb4,0xb9,0x05,0xfc,0x8d,0xbd,0x3e,0x57,0x46,0x66,0xf7,0x2b,0xde,0x6f,0x93,0x1b,0x72,0x00,0xe4,0x41,0x31,0xb1,0x42,0xb1,0x0e,0x61,0xe3,0xd8,0x54,0x61,0x20,0x77,0xc7,0x58}
		fmt.Println("签名结果为 : \n", hex.EncodeToString(signature))
	}

	// 验证与合并交易单
	pubkey := []byte{0x02,0x28,0x9c,0xfa,0xe6,0x17,0x5c,0xf7,0x81,0x90,0x07,0xfd,0x81,0x9a,0x17,0xda,0x45,0x14,0xed,0xbd,0x42,0x8c,0xee,0x15,0x26,0x7b,0x14,0x23,0x5b,0xf9,0x70,0xab,0xf5}

	// 构建签名体
	sigPubs := []*SigPub{
		{
			Signature: signature,
			PublicKey: pubkey,
		},
	}

	pass, signedTrans := VerifyAndCombineTransaction(emptyTrans, sigPubs)
	if pass {
		fmt.Println("合并之后的交易单为 : \n", signedTrans)
	} else {
		t.Error("验签失败！")
	}
}



// 2 in --> 2 out
func Test_f34b139c88c78fe24782c56974f9b8bad761b790d0b95f3ac6df2fdf49d706e4(t *testing.T) {

	// 模拟链上交易 f34b139c88c78fe24782c56974f9b8bad761b790d0b95f3ac6df2fdf49d706e4
	// 该笔交易有两个输入两个输出


	// 构建输入
	in1 := Vin{
		TxID: "e3386f3089d6600a4e2cd1ad9e1777205ccefaacd5f069c3ff80e3e751c78414",
		Vout: 1,
		Tree: TxTreeRegular,
		Amount: 37998973111,
		LockScript: "76a91402641b617ef166a5ebdd0435430370cef1f80bd888ac",
		BlockHeight: 204969,
		BlockIndex: 2,
	}

	in2 := Vin{
		TxID: "8b760fb8e6d68481f0e6056edac3581d75121975ed230cbecd21dad309612837",
		Vout: 1,
		Tree: TxTreeRegular,
		Amount: 45525407940,
		LockScript: "76a9146051bb564f212174a60d60701d60d618f878e23388ac",
		BlockHeight: 204969,
		BlockIndex: 1,
	}

	ins := []Vin{in1, in2}

	// 构建输出
	out1 := Vout{
		Amount: 68075421366,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsL82HdS1Li2T2i5zm44SPRn2zQnDmCnzYR",
	}

	out2 := Vout{
		Amount: 15448917785,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsMiSkUQQZfuu3A9jo4tp3awzE8V4ZEdPWD",
	}

	outs := []Vout{out1, out2}

	// 创建空交易单和待签哈希

	locktime := uint32(0)
	expiry := NoExpiryValue

	// 创建空交易单与待签哈希
	emptyTrans, hashes, err := CreateEmptyTransactionAndHash(ins, outs, locktime,expiry)

	if err != nil {
		t.Error("创建空交易单失败！")
		return
	} else {
		fmt.Println("空交易单为 : \n", emptyTrans)
		fmt.Println("第一个待签哈希为 : \n", hashes[0])
		fmt.Println("第二个待签哈希为 : \n", hashes[1])
	}


	// 对交易签名
	prikey1 := []byte{0x80, 0xbc, 0x39, 0x8d, 0x7c, 0x4a, 0x67, 0x4d, 0xaa, 0x97, 0x75, 0x66, 0xc2, 0xe6, 0xcd, 0x50, 0x40, 0x52, 0x00, 0x27, 0xe5, 0x7f, 0xe8, 0x06, 0xdf, 0xaa, 0x86, 0x8d, 0xf4, 0xcc, 0x43, 0xab}
	prikey2 := []byte{0x80, 0xbc, 0x39, 0x8d, 0x7c, 0x4a, 0x67, 0x4d, 0xaa, 0x97, 0x75, 0x66, 0xc2, 0xe6, 0xcd, 0x50, 0x40, 0x52, 0x00, 0x27, 0xe5, 0x7f, 0xe8, 0x06, 0xdf, 0xaa, 0x86, 0x8d, 0xf4, 0xcc, 0x43, 0xab}

	signature1, err := SignTransaction(hashes[0], prikey1)
	if err != nil {
		t.Error("签名交易单失败！")
		return
	} else {
		// for test only
		signature1 = []byte{0xb8,0xdb,0xbc,0x63,0xf7,0xed,0x21,0x00,0x60,0x12,0xc1,0x23,0x0b,0x57,0xfb,0xd3,0x9e,0x6d,0x50,0x99,0x76,0xaa,0x01,0x6a,0x97,0xb2,0x45,0xe1,0xa1,0xdc,0x66,0x25,0x27,0x95,0x5b,0x8f,0xea,0x03,0xd2,0xd4,0x97,0xc5,0xa5,0x7e,0xd8,0xa9,0x85,0xdd,0xd1,0xed,0x60,0xff,0x0a,0x70,0x22,0xd7,0x47,0x68,0x12,0x45,0x29,0x7b,0x38,0x08}
		fmt.Println("第一个签名结果为 : \n", hex.EncodeToString(signature1))
	}


	signature2, err := SignTransaction(hashes[0], prikey2)
	if err != nil {
		t.Error("签名交易单失败！")
		return
	} else {
		// for test only
		signature2 = []byte{0x91,0xb2,0x94,0xe9,0xe8,0x52,0x61,0x67,0x07,0xbb,0x61,0x72,0xab,0x7a,0x43,0x50,0x8d,0xc2,0xdc,0xe9,0xf7,0x9d,0xfa,0x5d,0x0b,0xc1,0x81,0xbc,0x02,0x51,0x00,0x39,0x0e,0x2a,0xfe,0x37,0x9e,0xec,0xbf,0x1a,0xf2,0x8d,0xf5,0x3b,0x4d,0xa3,0xf9,0xce,0x8c,0x41,0xcc,0x83,0x5b,0x49,0xf5,0xa5,0x0b,0xb4,0x0a,0x8a,0x11,0xf0,0x2a,0x8d}
		fmt.Println("第一个签名结果为 : \n", hex.EncodeToString(signature2))
	}

	// 验证与合并交易单
	pubkey1 := []byte{0x02,0x60,0xc6,0x92,0xbb,0x11,0xdd,0x64,0xba,0xf3,0x41,0xd5,0x9f,0x2d,0x16,0xa6,0xb3,0xbe,0x65,0x29,0x13,0x66,0xaa,0x9d,0x5a,0xe1,0x8d,0xde,0x5d,0xa6,0x40,0x70,0xcf}
	pubkey2 := []byte{0x02,0xa7,0xa1,0x64,0x21,0xce,0xb3,0xa5,0xc8,0x89,0x6b,0xc2,0x60,0x56,0x45,0xd9,0x81,0xba,0x94,0xa6,0xbe,0x64,0x16,0xa2,0xe6,0x73,0xf6,0x2a,0xcc,0x05,0xb9,0x13,0x2c}

	// 构建签名体
	sigPubs := []*SigPub{
		{
			Signature: signature1,
			PublicKey: pubkey1,
		},
		{
			Signature: signature2,
			PublicKey: pubkey2,
		},
	}

	pass, signedTrans := VerifyAndCombineTransaction(emptyTrans, sigPubs)
	if pass {
		fmt.Println("合并之后的交易单为 : \n", signedTrans)
	} else {
		t.Error("验签失败！")
	}
}

func TestGetVinList(t *testing.T) {
	emptyTrans := "01000000021484c751e7e380ffc369f0d5acface5c2077179eadd12c4e0a60d689306f38e30100000000ffffffff37286109d3da21cdbe0c23ed751912751d58c3da6e05e6f08184d6e6b80f768b0100000000ffffffff02b67e9cd90f00000000001976a9145cfd55af0a73a1f1686d36187838b0e91256ff3388ac19c7d3980300000000001976a9146e7806134bdd8232e1002f002eebc06adf87e07988ac0000000000000000:1976a91402641b617ef166a5ebdd0435430370cef1f80bd888ac/b750ead808000000a920030002000000:1976a9146051bb564f212174a60d60701d60d618f878e23388ac/c49886990a000000a920030001000000"

	vins,err := GetVinList(emptyTrans)

	if err != nil {
		t.Error("failed!")
	} else {
		fmt.Println("result : ")
		for _, in := range vins {
			fmt.Println(in)
		}
	}
}